#!/bin/sh
#
# An example hook script to prepare the commit log message.
# Called by "git commit" with the name of the file that has the
# commit message, followed by the description of the commit
# message's source.  The hook's purpose is to edit the commit
# message file.  If the hook fails with a non-zero status,
# the commit is aborted.
#
# To enable this hook, rename this file to "prepare-commit-msg".
#
# The prepare-commit-msg hook is run before the commit message
# editor is fired up but after the default message is created.
# It lets you edit the default message before the commit author
# sees it. This hook takes a few parameters:
# $1 - the path to the file that holds the commit message so far, (as .git/MERGE_MSG)
# $2 - the type of commit, (as message or merge)
# $3 - the commit SHA-1 if this is an amended commit.
# printf "1 = $1, 2 = $2, 3 = $3\n"



printf "Running the prepare-commmit-msg hook...\n"

# Get the project's `.git` folder.
GIT_DIR_="$(git rev-parse --git-dir)"

# Get the `AUTO_VERSIONING_ROOT_FOLDER_NAME`
AUTO_VERSIONING_ROOT_FOLDER_NAME=$(cat $GIT_DIR_/hooks/gitHooksRoot.txt)

# Read the configurations file.
githooksConfig=$(cat $GIT_DIR_/../$AUTO_VERSIONING_ROOT_FOLDER_NAME/githooksConfig.txt)

# $versionFilePath example: $AUTO_VERSIONING_ROOT_FOLDER_NAME/GALILEO_SMA_VERSION.txt
versionFilePath=$GIT_DIR_/../$(echo $githooksConfig | cut -d',' -f 1)

# $filePathToUpdate example: scripting/galileo.sma
filePathToUpdate=$GIT_DIR_/../$(echo $githooksConfig | cut -d',' -f 2)

# $targetBranch example: develop, use . to operate all branches
targetBranch=$(echo $githooksConfig | cut -d',' -f 3)


# $fileNameToUpdate example: galileo.sma
# Remove the '/app/blabla/' from the $filePathToUpdate argument name - https://regex101.com/r/rR0oM2/1
fileNameToUpdate=$(echo $filePathToUpdate | sed -r "s/((.+\/)+)//")

# $updateFlagFilePath example: isToUpdateTheGalileoFile.txt
sulfixName="FlagFile.txt"
updateFlagFilePath="$GIT_DIR_/$fileNameToUpdate$sulfixName"

currentGitFiles=$(git diff --name-only --cached)
currentBranch=$(git rev-parse --symbolic-full-name --abbrev-ref HEAD)

# Get the version number from the dedicated version file.
currentVersion=$(cat $versionFilePath)


# When the file "$updateFlagFilePath" exits, we must not to recreate it, as we just did
# that. This happens because the file "$updateFlagFilePath" is created to indicate that
# the version number is already updated and doing it again would create an infinite loop.
# Because this is a recursive shell script, hence this file is recalled later and it
# must to be stopped right here.
if [ -f $updateFlagFilePath ]
then
    printf "Removing old prepare-commmit-message flag file '$updateFlagFilePath'...\n"
    rm $updateFlagFilePath
    exit 0
fi


# If the $fileNameToUpdate is not being committed right now, do nothing.
if true # [[ $currentGitFiles == *"$fileNameToUpdate"* ]]
then
    # To prints a error message when it does not find the version number on the file.
    #
    # 'F' affects how PATTERN is interpreted (fixed string instead of a regex).
    # 'q' shhhhh... minimal printing.
    #
    if ! grep -Fq "v$currentVersion" "$filePathToUpdate"
    then
        printf "Error! Could not find v$currentVersion and update the file '$filePathToUpdate'.\n"
        printf "The current version number on this file must be v$currentVersion.\n"
        printf "Or fix the file '$versionFilePath' to the correct value.\n"
        exit 1
    fi

    # This creates the flag file '$updateFlagFilePath' to indicate that 'post-checkout' and
    # 'post-commit' hooks must to update the version number. It only updates whether the current
    # branch is $targetBranch and the file being changed is "$fileNameToUpdate".
    if [[ $currentBranch == $targetBranch || $targetBranch == "." ]]
    then
        echo "true" > $updateFlagFilePath
        printf "Successfully created the flag file '$updateFlagFilePath'\n"
    else
        printf "The '$fileNameToUpdate' file is not being updated, because we are not on the '$targetBranch' branch.\n"
    fi
else
    printf "The '$fileNameToUpdate' file is not being committed right now.\n"
fi


# Exits the program using a successful exit status code.
exit 0


